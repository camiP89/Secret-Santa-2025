// src/naughtyList.js

// Import the initialized Firebase app, analytics, and database from your firebase.js file
import { app, analytics, database } from '../src/firebase.js'; // <-- Corrected path!


// Import specific functions needed from the Realtime Database SDK
import { ref, push, remove, onValue } from "firebase/database";

// Get a reference to the 'naughtyList' path in your Realtime Database
const naughtyListRef = ref(database, "naughtyList");

document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("naughty-form");
  const nameInput = document.getElementById("name-input");
  const reasonInput = document.getElementById("reason-input");
  const list = document.getElementById("naughty-list"); // This is your <ul> element

  // --- Initial Naughty List Data (Optional) ---
  // You might want to populate some initial data if the database is empty.
  // This would typically run only ONCE when the app is first set up or if the list is truly empty.
  // For demonstration, we'll check if the database reference has children.
  onValue(naughtyListRef, (snapshot) => {
    if (!snapshot.exists()) { // If no data exists at 'naughtyList'
      const initialItems = [
        { name: "Ollie", reason: "Not listening" },
        { name: "Louis", reason: "Waking up in the night" },
        { name: "Lily", reason: "Talking to boys on SnapChat" },
        { name: "Scarlet", reason: "Requesting too many game apps" },
      ];
      initialItems.forEach(item => push(naughtyListRef, item)); // Push initial items to DB
    }
  }, { onlyOnce: true }); // Use onlyOnce to prevent re-running this if data is later deleted

  // --- Real-time Listener for the Naughty List ---
  // This listens for any changes to the 'naughtyList' path in Firebase
  // and updates the UI whenever data is added, changed, or removed.
  onValue(naughtyListRef, (snapshot) => {
    list.innerHTML = ""; // Clear the current list in the UI

    snapshot.forEach((childSnapshot) => {
      const itemKey = childSnapshot.key; // Get the unique key generated by push()
      const itemData = childSnapshot.val(); // Get the { name, reason } object

      createListItem(itemKey, itemData.name, itemData.reason);
    });

    // You can optionally log an analytics event when the list updates
    // logEvent(analytics, 'naughty_list_updated', { item_count: snapshot.size });
  });


  // --- Helper function to create a list item in the UI ---
  // Now takes the itemKey (from Firebase) to allow for targeted deletion
  function createListItem(itemKey, name, reason) {
    const li = document.createElement("li");
    li.textContent = `${name}: ${reason} `;

    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "❌";
    deleteBtn.classList.add("delete-btn");
    deleteBtn.addEventListener("click", () => {
      // DELETE FROM FIREBASE: Remove the specific item using its unique key
      remove(ref(database, `naughtyList/${itemKey}`))
        .then(() => {
          console.log("Item removed from Firebase successfully!");
          // The onValue listener will automatically update the UI
        })
        .catch((error) => {
          console.error("Error removing item from Firebase:", error);
        });

      // Optionally log an analytics event for deletion
      // logEvent(analytics, 'naughty_item_deleted', { item_key: itemKey });
    });

    li.appendChild(deleteBtn);
    list.appendChild(li);
  }


  // --- Form Submission Handler ---
  form.addEventListener("submit", (e) => {
    e.preventDefault();
    const name = nameInput.value.trim() || "Anonymous";
    const reason = reasonInput.value.trim();

    if (reason) {
      const newItem = { name, reason, timestamp: Date.now() }; // Add a timestamp for ordering

      // ADD TO FIREBASE: Use push() to add a new item with a unique key
      push(naughtyListRef, newItem)
        .then(() => {
          console.log("Item added to Firebase successfully!");
          nameInput.value = "";
          reasonInput.value = "";
          // The onValue listener will automatically update the UI
        })
        .catch((error) => {
          console.error("Error adding item to Firebase:", error);
        });

      // Optionally log an analytics event for adding
      // logEvent(analytics, 'naughty_item_added', { item_name: name, reason_length: reason.length });
    }
  });
});
